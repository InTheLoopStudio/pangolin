// Mocks generated by Mockito 5.4.0 from annotations
// in intheloopapp/test/ui/likes_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:intheloopapp/data/database_repository.dart' as _i4;
import 'package:intheloopapp/domains/models/activity.dart' as _i8;
import 'package:intheloopapp/domains/models/badge.dart' as _i9;
import 'package:intheloopapp/domains/models/booking.dart' as _i10;
import 'package:intheloopapp/domains/models/comment.dart' as _i3;
import 'package:intheloopapp/domains/models/loop.dart' as _i7;
import 'package:intheloopapp/domains/models/option.dart' as _i2;
import 'package:intheloopapp/domains/models/service.dart' as _i11;
import 'package:intheloopapp/domains/models/user_model.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOption_0<T> extends _i1.SmartFake implements _i2.Option<T> {
  _FakeOption_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComment_1 extends _i1.SmartFake implements _i3.Comment {
  _FakeComment_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseRepository extends _i1.Mock
    implements _i4.DatabaseRepository {
  MockDatabaseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> userEmailExists(String? email) => (super.noSuchMethod(
        Invocation.method(
          #userEmailExists,
          [email],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> createUser(_i6.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [user],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i2.Option<_i6.UserModel>> getUserByUsername(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByUsername,
          [username],
        ),
        returnValue: _i5.Future<_i2.Option<_i6.UserModel>>.value(
            _FakeOption_0<_i6.UserModel>(
          this,
          Invocation.method(
            #getUserByUsername,
            [username],
          ),
        )),
      ) as _i5.Future<_i2.Option<_i6.UserModel>>);
  @override
  _i5.Future<_i2.Option<_i6.UserModel>> getUserById(
    String? userId, {
    bool? ignoreCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [userId],
          {#ignoreCache: ignoreCache},
        ),
        returnValue: _i5.Future<_i2.Option<_i6.UserModel>>.value(
            _FakeOption_0<_i6.UserModel>(
          this,
          Invocation.method(
            #getUserById,
            [userId],
            {#ignoreCache: ignoreCache},
          ),
        )),
      ) as _i5.Future<_i2.Option<_i6.UserModel>>);
  @override
  _i5.Future<List<_i6.UserModel>> searchUsersByLocation({
    required double? lat,
    required double? lng,
    int? radiusInMeters = 50000,
    int? limit = 100,
    String? lastUserId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchUsersByLocation,
          [],
          {
            #lat: lat,
            #lng: lng,
            #radiusInMeters: radiusInMeters,
            #limit: limit,
            #lastUserId: lastUserId,
          },
        ),
        returnValue: _i5.Future<List<_i6.UserModel>>.value(<_i6.UserModel>[]),
      ) as _i5.Future<List<_i6.UserModel>>);
  @override
  _i5.Future<void> updateUserData(_i6.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUserData,
          [user],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<bool> checkUsernameAvailability(
    String? username,
    String? userid,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkUsernameAvailability,
          [
            username,
            userid,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<List<_i6.UserModel>> getViewLeaders() => (super.noSuchMethod(
        Invocation.method(
          #getViewLeaders,
          [],
        ),
        returnValue: _i5.Future<List<_i6.UserModel>>.value(<_i6.UserModel>[]),
      ) as _i5.Future<List<_i6.UserModel>>);
  @override
  _i5.Future<List<_i6.UserModel>> getBookingLeaders() => (super.noSuchMethod(
        Invocation.method(
          #getBookingLeaders,
          [],
        ),
        returnValue: _i5.Future<List<_i6.UserModel>>.value(<_i6.UserModel>[]),
      ) as _i5.Future<List<_i6.UserModel>>);
  @override
  _i5.Future<_i2.Option<_i7.Loop>> getLoopById(
    String? loopId, {
    bool? ignoreCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLoopById,
          [loopId],
          {#ignoreCache: ignoreCache},
        ),
        returnValue:
            _i5.Future<_i2.Option<_i7.Loop>>.value(_FakeOption_0<_i7.Loop>(
          this,
          Invocation.method(
            #getLoopById,
            [loopId],
            {#ignoreCache: ignoreCache},
          ),
        )),
      ) as _i5.Future<_i2.Option<_i7.Loop>>);
  @override
  _i5.Future<void> addLoop(_i7.Loop? loop) => (super.noSuchMethod(
        Invocation.method(
          #addLoop,
          [loop],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteLoop(_i7.Loop? loop) => (super.noSuchMethod(
        Invocation.method(
          #deleteLoop,
          [loop],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i7.Loop>> getUserLoops(
    String? userId, {
    int? limit = 100,
    String? lastLoopId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserLoops,
          [userId],
          {
            #limit: limit,
            #lastLoopId: lastLoopId,
          },
        ),
        returnValue: _i5.Future<List<_i7.Loop>>.value(<_i7.Loop>[]),
      ) as _i5.Future<List<_i7.Loop>>);
  @override
  _i5.Stream<_i7.Loop> userLoopsObserver(
    String? userId, {
    int? limit = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userLoopsObserver,
          [userId],
          {#limit: limit},
        ),
        returnValue: _i5.Stream<_i7.Loop>.empty(),
      ) as _i5.Stream<_i7.Loop>);
  @override
  _i5.Future<List<_i7.Loop>> getFollowingLoops(
    String? currentUserId, {
    int? limit = 100,
    String? lastLoopId,
    bool? ignoreCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFollowingLoops,
          [currentUserId],
          {
            #limit: limit,
            #lastLoopId: lastLoopId,
            #ignoreCache: ignoreCache,
          },
        ),
        returnValue: _i5.Future<List<_i7.Loop>>.value(<_i7.Loop>[]),
      ) as _i5.Future<List<_i7.Loop>>);
  @override
  _i5.Stream<_i7.Loop> followingLoopsObserver(
    String? currentUserId, {
    int? limit = 100,
    bool? ignoreCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #followingLoopsObserver,
          [currentUserId],
          {
            #limit: limit,
            #ignoreCache: ignoreCache,
          },
        ),
        returnValue: _i5.Stream<_i7.Loop>.empty(),
      ) as _i5.Stream<_i7.Loop>);
  @override
  _i5.Future<List<_i7.Loop>> getAllLoops(
    String? currentUserId, {
    int? limit = 100,
    String? lastLoopId,
    bool? ignoreCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllLoops,
          [currentUserId],
          {
            #limit: limit,
            #lastLoopId: lastLoopId,
            #ignoreCache: ignoreCache,
          },
        ),
        returnValue: _i5.Future<List<_i7.Loop>>.value(<_i7.Loop>[]),
      ) as _i5.Future<List<_i7.Loop>>);
  @override
  _i5.Stream<_i7.Loop> allLoopsObserver(
    String? currentUserId, {
    int? limit = 100,
    bool? ignoreCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #allLoopsObserver,
          [currentUserId],
          {
            #limit: limit,
            #ignoreCache: ignoreCache,
          },
        ),
        returnValue: _i5.Stream<_i7.Loop>.empty(),
      ) as _i5.Stream<_i7.Loop>);
  @override
  _i5.Future<void> addLike(
    String? currentUserId,
    String? loopId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLike,
          [
            currentUserId,
            loopId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteLike(
    String? currentUserId,
    String? loopId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteLike,
          [
            currentUserId,
            loopId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<bool> isLiked(
    String? currentUserId,
    String? loopId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isLiked,
          [
            currentUserId,
            loopId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<List<_i6.UserModel>> getLikes(String? loopId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLikes,
          [loopId],
        ),
        returnValue: _i5.Future<List<_i6.UserModel>>.value(<_i6.UserModel>[]),
      ) as _i5.Future<List<_i6.UserModel>>);
  @override
  _i5.Future<List<_i3.Comment>> getComments(
    String? rootId, {
    int? limit = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [rootId],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i3.Comment>>.value(<_i3.Comment>[]),
      ) as _i5.Future<List<_i3.Comment>>);
  @override
  _i5.Stream<_i3.Comment> commentsObserver(
    String? rootId, {
    int? limit = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #commentsObserver,
          [rootId],
          {#limit: limit},
        ),
        returnValue: _i5.Stream<_i3.Comment>.empty(),
      ) as _i5.Stream<_i3.Comment>);
  @override
  _i5.Future<_i3.Comment> getComment(
    String? rootId,
    String? commentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComment,
          [
            rootId,
            commentId,
          ],
        ),
        returnValue: _i5.Future<_i3.Comment>.value(_FakeComment_1(
          this,
          Invocation.method(
            #getComment,
            [
              rootId,
              commentId,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Comment>);
  @override
  _i5.Future<void> addComment(_i3.Comment? comment) => (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> likeComment(
    String? currentUserId,
    _i3.Comment? comment,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeComment,
          [
            currentUserId,
            comment,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> unlikeComment(
    String? currentUserId,
    _i3.Comment? comment,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlikeComment,
          [
            currentUserId,
            comment,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<bool> isCommentLiked(
    String? currentUserId,
    _i3.Comment? comment,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isCommentLiked,
          [
            currentUserId,
            comment,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> shareLoop(_i7.Loop? loop) => (super.noSuchMethod(
        Invocation.method(
          #shareLoop,
          [loop],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> reportLoop({
    required String? reporterId,
    required _i7.Loop? loop,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reportLoop,
          [],
          {
            #reporterId: reporterId,
            #loop: loop,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<int> followersNum(String? userid) => (super.noSuchMethod(
        Invocation.method(
          #followersNum,
          [userid],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<int> followingNum(String? userid) => (super.noSuchMethod(
        Invocation.method(
          #followingNum,
          [userid],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<void> followUser(
    String? currentUserId,
    String? visitedUserId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #followUser,
          [
            currentUserId,
            visitedUserId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> unfollowUser(
    String? currentUserId,
    String? visitedUserId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unfollowUser,
          [
            currentUserId,
            visitedUserId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<bool> isFollowingUser(
    String? currentUserId,
    String? visitedUserId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isFollowingUser,
          [
            currentUserId,
            visitedUserId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<List<_i6.UserModel>> getFollowing(String? currentUserId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFollowing,
          [currentUserId],
        ),
        returnValue: _i5.Future<List<_i6.UserModel>>.value(<_i6.UserModel>[]),
      ) as _i5.Future<List<_i6.UserModel>>);
  @override
  _i5.Future<List<_i6.UserModel>> getFollowers(String? currentUserId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFollowers,
          [currentUserId],
        ),
        returnValue: _i5.Future<List<_i6.UserModel>>.value(<_i6.UserModel>[]),
      ) as _i5.Future<List<_i6.UserModel>>);
  @override
  _i5.Future<List<_i8.Activity>> getActivities(
    String? userId, {
    int? limit = 100,
    String? lastActivityId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivities,
          [userId],
          {
            #limit: limit,
            #lastActivityId: lastActivityId,
          },
        ),
        returnValue: _i5.Future<List<_i8.Activity>>.value(<_i8.Activity>[]),
      ) as _i5.Future<List<_i8.Activity>>);
  @override
  _i5.Stream<_i8.Activity> activitiesObserver(
    String? userId, {
    int? limit = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #activitiesObserver,
          [userId],
          {#limit: limit},
        ),
        returnValue: _i5.Stream<_i8.Activity>.empty(),
      ) as _i5.Stream<_i8.Activity>);
  @override
  _i5.Future<void> addActivity({
    required String? currentUserId,
    required String? visitedUserId,
    required _i8.ActivityType? type,
    _i7.Loop? loop,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addActivity,
          [],
          {
            #currentUserId: currentUserId,
            #visitedUserId: visitedUserId,
            #type: type,
            #loop: loop,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> markActivityAsRead(_i8.Activity? activity) =>
      (super.noSuchMethod(
        Invocation.method(
          #markActivityAsRead,
          [activity],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<bool> isVerified(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #isVerified,
          [userId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> createBadge(_i9.Badge? badge) => (super.noSuchMethod(
        Invocation.method(
          #createBadge,
          [badge],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> sendBadge(
    String? badgeId,
    String? receiverId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendBadge,
          [
            badgeId,
            receiverId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Stream<_i9.Badge> userCreatedBadgesObserver(
    String? userId, {
    int? limit = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userCreatedBadgesObserver,
          [userId],
          {#limit: limit},
        ),
        returnValue: _i5.Stream<_i9.Badge>.empty(),
      ) as _i5.Stream<_i9.Badge>);
  @override
  _i5.Future<List<_i9.Badge>> getUserCreatedBadges(
    String? userId, {
    int? limit = 100,
    String? lastBadgeId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserCreatedBadges,
          [userId],
          {
            #limit: limit,
            #lastBadgeId: lastBadgeId,
          },
        ),
        returnValue: _i5.Future<List<_i9.Badge>>.value(<_i9.Badge>[]),
      ) as _i5.Future<List<_i9.Badge>>);
  @override
  _i5.Stream<_i9.Badge> userBadgesObserver(
    String? userId, {
    int? limit = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userBadgesObserver,
          [userId],
          {#limit: limit},
        ),
        returnValue: _i5.Stream<_i9.Badge>.empty(),
      ) as _i5.Stream<_i9.Badge>);
  @override
  _i5.Future<List<_i9.Badge>> getUserBadges(
    String? userId, {
    int? limit = 100,
    String? lastBadgeId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserBadges,
          [userId],
          {
            #limit: limit,
            #lastBadgeId: lastBadgeId,
          },
        ),
        returnValue: _i5.Future<List<_i9.Badge>>.value(<_i9.Badge>[]),
      ) as _i5.Future<List<_i9.Badge>>);
  @override
  _i5.Future<void> createBooking(_i10.Booking? booking) => (super.noSuchMethod(
        Invocation.method(
          #createBooking,
          [booking],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i2.Option<_i10.Booking>> getBookingById(String? bookRequestId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingById,
          [bookRequestId],
        ),
        returnValue: _i5.Future<_i2.Option<_i10.Booking>>.value(
            _FakeOption_0<_i10.Booking>(
          this,
          Invocation.method(
            #getBookingById,
            [bookRequestId],
          ),
        )),
      ) as _i5.Future<_i2.Option<_i10.Booking>>);
  @override
  _i5.Future<List<_i10.Booking>> getBookingsByRequesterRequestee(
    String? requesterId,
    String? requesteeId, {
    int? limit = 20,
    String? lastBookingRequestId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingsByRequesterRequestee,
          [
            requesterId,
            requesteeId,
          ],
          {
            #limit: limit,
            #lastBookingRequestId: lastBookingRequestId,
          },
        ),
        returnValue: _i5.Future<List<_i10.Booking>>.value(<_i10.Booking>[]),
      ) as _i5.Future<List<_i10.Booking>>);
  @override
  _i5.Future<List<_i10.Booking>> getBookingsByRequester(
    String? userId, {
    int? limit = 20,
    String? lastBookingRequestId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingsByRequester,
          [userId],
          {
            #limit: limit,
            #lastBookingRequestId: lastBookingRequestId,
          },
        ),
        returnValue: _i5.Future<List<_i10.Booking>>.value(<_i10.Booking>[]),
      ) as _i5.Future<List<_i10.Booking>>);
  @override
  _i5.Future<List<_i10.Booking>> getBookingsByRequestee(
    String? userId, {
    int? limit = 20,
    String? lastBookingRequestId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingsByRequestee,
          [userId],
          {
            #limit: limit,
            #lastBookingRequestId: lastBookingRequestId,
          },
        ),
        returnValue: _i5.Future<List<_i10.Booking>>.value(<_i10.Booking>[]),
      ) as _i5.Future<List<_i10.Booking>>);
  @override
  _i5.Future<void> updateBooking(_i10.Booking? booking) => (super.noSuchMethod(
        Invocation.method(
          #updateBooking,
          [booking],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> createService(_i11.Service? service) => (super.noSuchMethod(
        Invocation.method(
          #createService,
          [service],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> updateService(_i11.Service? service) => (super.noSuchMethod(
        Invocation.method(
          #updateService,
          [service],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i2.Option<_i11.Service>> getServiceById(
    String? userId,
    String? serviceId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getServiceById,
          [
            userId,
            serviceId,
          ],
        ),
        returnValue: _i5.Future<_i2.Option<_i11.Service>>.value(
            _FakeOption_0<_i11.Service>(
          this,
          Invocation.method(
            #getServiceById,
            [
              userId,
              serviceId,
            ],
          ),
        )),
      ) as _i5.Future<_i2.Option<_i11.Service>>);
  @override
  _i5.Future<List<_i11.Service>> getUserServices(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserServices,
          [userId],
        ),
        returnValue: _i5.Future<List<_i11.Service>>.value(<_i11.Service>[]),
      ) as _i5.Future<List<_i11.Service>>);
  @override
  _i5.Future<void> deleteService(
    String? userId,
    String? serviceId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteService,
          [
            userId,
            serviceId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> showInterest({
    required String? userId,
    required String? loopId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showInterest,
          [],
          {
            #userId: userId,
            #loopId: loopId,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> cancelInterest({
    required String? userId,
    required String? loopId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelInterest,
          [],
          {
            #userId: userId,
            #loopId: loopId,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i6.UserModel>> getInterestedUsers(String? loopId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInterestedUsers,
          [loopId],
        ),
        returnValue: _i5.Future<List<_i6.UserModel>>.value(<_i6.UserModel>[]),
      ) as _i5.Future<List<_i6.UserModel>>);
  @override
  _i5.Future<bool> isInterested({
    required String? userId,
    required String? loopId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isInterested,
          [],
          {
            #userId: userId,
            #loopId: loopId,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
