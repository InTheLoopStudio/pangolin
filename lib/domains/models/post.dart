import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:intheloopapp/utils.dart';
import 'package:json_annotation/json_annotation.dart';

part 'post.g.dart';

/// The definition for a [Post]
///
/// This type is almost identical to the schema used to store
/// posts in the DB
@JsonSerializable()
class Post extends Equatable {
  /// A [Post] requires every field to be filled
  /// i.e. no optional fields
  const Post({
    required this.id,
    required this.userId,
    required this.title,
    required this.description,
    required this.imagePath,
    required this.timestamp,
    required this.likeCount,
    required this.commentCount,
    required this.shareCount,
    required this.tags,
    required this.deleted,
  });

  /// Creates a [Post] with default values
  factory Post.empty() => Post(
        id: '',
        userId: '',
        title: '',
        description: '',
        imagePath: '',
        timestamp: DateTime.now(),
        likeCount: 0,
        commentCount: 0,
        shareCount: 0,
        tags: const [],
        deleted: false,
      );

  /// Builds a [Post] from a firebase `DocumentSnapshot`
  ///
  /// And attempts to provide sensible defaults
  /// if values are missing
  factory Post.fromDoc(DocumentSnapshot<Map<String, dynamic>> doc) {
    final tmpTimestamp = doc.getOrElse(
      'timestamp',
      Timestamp.now(),
    ) as Timestamp;

    return Post(
      id: doc.id,
      userId: doc.getOrElse('userId', '') as String,
      title: doc.getOrElse('title', '') as String,
      description: doc.getOrElse('description', '') as String,
      imagePath: doc.getOrElse('imagePath', '') as String,
      timestamp: tmpTimestamp.toDate(),
      likeCount: doc.getOrElse('likeCount', 0) as int,
      commentCount: doc.getOrElse('commentCount', 0) as int,
      shareCount: doc.getOrElse('shareCount', 0) as int,
      tags: List.from(
        doc.getOrElse('tags', <dynamic>[]) as Iterable<dynamic>,
      ),
      deleted: doc.getOrElse('deleted', false) as bool,
    );
  }

  /// Builds a [Post] from a `Map` using the autogenerated
  /// methods from jsonserialize
  factory Post.fromJson(Map<String, dynamic> json) => _$PostFromJson(json);

  /// Converts a [Post] to a `Map` using the autogenerated
  /// methods from jsonserialize
  Map<String, dynamic> toJson() => _$PostToJson(this);

  /// The uuid of this [Post]
  final String id;

  /// The id of this [Post]'s author
  final String userId;

  /// The title for this [Post]
  final String title;

  /// The description/caption/body for this [Post]
  final String description;

  /// The url for the audio associated with this [Post]
  final String imagePath;

  /// The timestamp this [Post] for created at
  final DateTime timestamp;

  /// The number of likes this [Post] has
  final int likeCount;

  /// The number of comments this [Post] has
  final int commentCount;

  /// The number of shares this [Post] has
  final int shareCount;

  /// The tags associated with this [Post]
  final List<String> tags;

  /// Whether this [Post] was deleted
  final bool deleted;

  @override
  List<Object> get props => [
        id,
        userId,
        title,
        description,
        imagePath,
        likeCount,
        commentCount,
        shareCount,
        tags,
        deleted,
      ];

  /// Whether a [Post] is empty
  bool get isEmpty => this == Post.empty();

  /// Whether a [Post] isn't empty
  bool get isNotEmpty => this != Post.empty();

  /// Creates a new [Post] with select attributes changed
  ///
  /// Posts are immutable so to modify a value
  /// a new [Post] must be created with unchanged
  /// values being copied from the original [Post]
  Post copyWith({
    String? id,
    String? userId,
    String? title,
    String? description,
    String? imagePath,
    DateTime? timestamp,
    int? likeCount,
    int? commentCount,
    int? shareCount,
    List<String>? tags,
    bool? deleted,
  }) {
    return Post(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      title: title ?? this.title,
      description: description ?? this.description,
      imagePath: imagePath ?? this.imagePath,
      timestamp: timestamp ?? this.timestamp,
      likeCount: likeCount ?? this.likeCount,
      commentCount: commentCount ?? this.commentCount,
      shareCount: shareCount ?? this.shareCount,
      tags: tags ?? this.tags,
      deleted: deleted ?? this.deleted,
    );
  }
}
