import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:intheloopapp/utils.dart';
import 'package:json_annotation/json_annotation.dart';

part 'loop.g.dart';

/// The definition for a [Loop]
///
/// This type is almost identical to the schema used to store
/// loops in the DB
@JsonSerializable()
class Loop extends Equatable {
  /// A [Loop] requires every field to be filled
  /// i.e. no optional fields
  const Loop({
    required this.id,
    required this.userId,
    required this.title,
    required this.description,
    required this.audioPath,
    required this.imagePaths,
    required this.timestamp,
    required this.likeCount,
    required this.commentCount,
    required this.shareCount,
    required this.tags,
    required this.deleted,
  });

  /// Creates a [Loop] with default values
  factory Loop.empty() => Loop(
        id: '',
        userId: '',
        title: '',
        description: '',
        audioPath: '',
        imagePaths: const [],
        timestamp: DateTime.now(),
        likeCount: 0,
        commentCount: 0,
        shareCount: 0,
        tags: const [],
        deleted: false,
      );

  /// Builds a [Loop] from a firebase `DocumentSnapshot`
  ///
  /// And attempts to provide sensible defaults
  /// if values are missing
  factory Loop.fromDoc(DocumentSnapshot<Map<String, dynamic>> doc) {
    final tmpTimestamp = doc.getOrElse(
      'timestamp',
      Timestamp.now(),
    ) as Timestamp;

    return Loop(
      id: doc.id,
      userId: doc.getOrElse('userId', '') as String,
      title: doc.getOrElse('title', '') as String,
      description: doc.getOrElse('description', '') as String,
      audioPath: doc.getOrElse('audioPath', '') as String,
      imagePaths: List.from(
        doc.getOrElse('imagePaths', <dynamic>[]) as Iterable<dynamic>,
      ),
      timestamp: tmpTimestamp.toDate(),
      likeCount: doc.getOrElse('likeCount', 0) as int,
      commentCount: doc.getOrElse('commentCount', 0) as int,
      shareCount: doc.getOrElse('shareCount', 0) as int,
      tags: List.from(
        doc.getOrElse('tags', <dynamic>[]) as Iterable<dynamic>,
      ),
      deleted: doc.getOrElse('deleted', false) as bool,
    );
  }

  /// Builds a [Loop] from a `Map` using the autogenerated
  /// methods from jsonserialize
  factory Loop.fromJson(Map<String, dynamic> json) => _$LoopFromJson(json);

  /// Converts a [Loop] to a `Map` using the autogenerated
  /// methods from jsonserialize
  Map<String, dynamic> toJson() => _$LoopToJson(this);

  Map<String, dynamic> toMap() => <String, dynamic>{
        'id': id,
        'userId': userId,
        'title': title,
        'description': description,
        'audioPath': audioPath,
        'imagePaths': imagePaths,
        'timestamp': timestamp,
        'likeCount': likeCount,
        'commentCount': commentCount,
        'shareCount': shareCount,
        'tags': tags,
        'deleted': deleted,
      };

  /// The uuid of this [Loop]
  final String id;

  /// The id of this [Loop]'s author
  final String userId;

  /// The title for this [Loop]
  final String title;

  /// The description/caption/body for this [Loop]
  final String description;

  /// The url for the audio associated with this [Loop]
  final String audioPath;

  /// The urls for the images associated with this [Loop]
  final List<String> imagePaths;

  /// The timestamp this [Loop] for created at
  final DateTime timestamp;

  /// The number of likes this [Loop] has
  final int likeCount;

  /// The number of comments this [Loop] has
  final int commentCount;

  /// The number of shares this [Loop] has
  final int shareCount;

  /// The tags associated with this [Loop]
  final List<String> tags;

  /// Whether this [Loop] was deleted
  final bool deleted;

  @override
  List<Object> get props => [
        id,
        userId,
        title,
        description,
        audioPath,
        imagePaths,
        likeCount,
        commentCount,
        shareCount,
        tags,
        deleted,
      ];

  /// Whether a [Loop] is empty
  bool get isEmpty => this == Loop.empty();

  /// Whether a [Loop] isn't empty
  bool get isNotEmpty => this != Loop.empty();

  /// Creates a new [Loop] with select attributes changed
  ///
  /// Loops are immutable so to modify a value
  /// a new [Loop] must be created with unchanged
  /// values being copied from the original [Loop]
  Loop copyWith({
    String? id,
    String? userId,
    String? title,
    String? description,
    String? audioPath,
    List<String>? imagePaths,
    DateTime? timestamp,
    int? likeCount,
    int? commentCount,
    int? shareCount,
    List<String>? tags,
    bool? deleted,
  }) {
    return Loop(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      title: title ?? this.title,
      description: description ?? this.description,
      audioPath: audioPath ?? this.audioPath,
      imagePaths: imagePaths ?? this.imagePaths,
      timestamp: timestamp ?? this.timestamp,
      likeCount: likeCount ?? this.likeCount,
      commentCount: commentCount ?? this.commentCount,
      shareCount: shareCount ?? this.shareCount,
      tags: tags ?? this.tags,
      deleted: deleted ?? this.deleted,
    );
  }
}
